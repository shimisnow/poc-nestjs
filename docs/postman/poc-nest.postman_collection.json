{
	"info": {
		"_postman_id": "17a878a1-6dca-4440-af05-00f9741a4e51",
		"name": "POC-NESTJS",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30166483"
	},
	"item": [
		{
			"name": "auth",
			"item": [
				{
					"name": "/auth/login",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Api-Version",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"anderson\",\r\n    \"password\": \"test@1234\",\r\n    \"requestRefreshToken\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{auth_service_host}}/auth/login",
							"host": [
								"{{auth_service_host}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "/auth/password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const userId = '4799cc31-7692-40b3-afff-cc562baf5374';\r",
									"\r",
									"/***** DO NOT EDIT AFTER THIS *****/\r",
									"\r",
									"const currentTimeInSeconds = Math.floor(new Date().getTime() / 1000);\r",
									"const issuedAtTimeSeconds = currentTimeInSeconds; // iat\r",
									"const expirationTimeSeconds = currentTimeInSeconds + 60; // exp\r",
									"const SECRET_KEY = pm.collectionVariables.get('JWT_SECRET');\r",
									"\r",
									"const header = {\r",
									"    alg: 'HS256',\r",
									"}\r",
									"\r",
									"const payload = {\r",
									"    userId,\r",
									"    role: 'user',\r",
									"    loginId: new Date().getTime().toString(),\r",
									"    iat: issuedAtTimeSeconds,\r",
									"    exp: expirationTimeSeconds,\r",
									"};\r",
									"\r",
									"const removeIllegalCharacters = (input) => {\r",
									"    return input\r",
									"        .replace(/=/g, '')\r",
									"        .replace(/\\+/g, '-')\r",
									"        .replace(/\\//g, '_');\r",
									"};\r",
									"\r",
									"const base64object = (input) => {\r",
									"    const inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
									"    const base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
									"    const output = removeIllegalCharacters(base64);\r",
									"    return output;\r",
									"};\r",
									"\r",
									"const unsignedToken = base64object(header) + \".\" + base64object(payload);\r",
									"const signatureHash = CryptoJS.HmacSHA256(unsignedToken, SECRET_KEY);\r",
									"const signature = CryptoJS.enc.Base64.stringify(signatureHash);\r",
									"const token = unsignedToken + '.' + signature;\r",
									"const formattedToken = removeIllegalCharacters(token);\r",
									"\r",
									"pm.collectionVariables.set('JWT_TOKEN', formattedToken);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-Api-Version",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"currentPassword\": \"1234@test\",\r\n    \"newPassword\": \"test@1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{auth_service_host}}/auth/password",
							"host": [
								"{{auth_service_host}}"
							],
							"path": [
								"auth",
								"password"
							]
						}
					},
					"response": []
				},
				{
					"name": "/auth/logout",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const userId = '4799cc31-7692-40b3-afff-cc562baf5374';\r",
									"\r",
									"/***** DO NOT EDIT AFTER THIS *****/\r",
									"\r",
									"const currentTimeInSeconds = Math.floor(new Date().getTime() / 1000);\r",
									"const issuedAtTimeSeconds = currentTimeInSeconds; // iat\r",
									"const expirationTimeSeconds = currentTimeInSeconds + 60; // exp\r",
									"const SECRET_KEY = pm.collectionVariables.get('JWT_SECRET');\r",
									"\r",
									"const header = {\r",
									"    alg: 'HS256',\r",
									"}\r",
									"\r",
									"const payload = {\r",
									"    userId,\r",
									"    role: 'user',\r",
									"    loginId: '1707920014294',\r",
									"    iat: issuedAtTimeSeconds,\r",
									"    exp: expirationTimeSeconds,\r",
									"};\r",
									"\r",
									"const removeIllegalCharacters = (input) => {\r",
									"    return input\r",
									"        .replace(/=/g, '')\r",
									"        .replace(/\\+/g, '-')\r",
									"        .replace(/\\//g, '_');\r",
									"};\r",
									"\r",
									"const base64object = (input) => {\r",
									"    const inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
									"    const base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
									"    const output = removeIllegalCharacters(base64);\r",
									"    return output;\r",
									"};\r",
									"\r",
									"const unsignedToken = base64object(header) + \".\" + base64object(payload);\r",
									"const signatureHash = CryptoJS.HmacSHA256(unsignedToken, SECRET_KEY);\r",
									"const signature = CryptoJS.enc.Base64.stringify(signatureHash);\r",
									"const token = unsignedToken + '.' + signature;\r",
									"const formattedToken = removeIllegalCharacters(token);\r",
									"\r",
									"pm.collectionVariables.set('JWT_TOKEN', formattedToken);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-Api-Version",
								"value": "1",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{auth_service_host}}/auth/logout",
							"host": [
								"{{auth_service_host}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "/auth/verify",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.upsert({\r",
									"    key: 'Content-Type',\r",
									"    value: 'application/json'\r",
									"});\r",
									"\r",
									"pm.request.body.raw = JSON.stringify({\r",
									"    userId: '4799cc31-7692-40b3-afff-cc562baf5374',\r",
									"    loginId: '1707920014294',\r",
									"    iat: Math.floor(new Date().getTime() / 1000)\r",
									"});\r",
									"\r",
									"console.log(pm.request.body);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "X-Api-Version",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{auth_service_host}}/auth/verify",
							"host": [
								"{{auth_service_host}}"
							],
							"path": [
								"auth",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "/auth/refresh",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const userId = '4799cc31-7692-40b3-afff-cc562baf5374';\r",
									"\r",
									"/***** DO NOT EDIT AFTER THIS *****/\r",
									"\r",
									"const currentTimeInSeconds = Math.floor(new Date().getTime() / 1000);\r",
									"const issuedAtTimeSeconds = currentTimeInSeconds; // iat\r",
									"const expirationTimeSeconds = currentTimeInSeconds + 60; // exp\r",
									"const SECRET_KEY = pm.collectionVariables.get('JWT_REFRESH_SECRET');\r",
									"\r",
									"const header = {\r",
									"    alg: 'HS256',\r",
									"}\r",
									"\r",
									"const payload = {\r",
									"    userId,\r",
									"    role: 'user',\r",
									"    loginId: new Date().getTime().toString(),\r",
									"    iat: issuedAtTimeSeconds,\r",
									"    exp: expirationTimeSeconds,\r",
									"};\r",
									"\r",
									"const removeIllegalCharacters = (input) => {\r",
									"    return input\r",
									"        .replace(/=/g, '')\r",
									"        .replace(/\\+/g, '-')\r",
									"        .replace(/\\//g, '_');\r",
									"};\r",
									"\r",
									"const base64object = (input) => {\r",
									"    const inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
									"    const base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
									"    const output = removeIllegalCharacters(base64);\r",
									"    return output;\r",
									"};\r",
									"\r",
									"const unsignedToken = base64object(header) + \".\" + base64object(payload);\r",
									"const signatureHash = CryptoJS.HmacSHA256(unsignedToken, SECRET_KEY);\r",
									"const signature = CryptoJS.enc.Base64.stringify(signatureHash);\r",
									"const token = unsignedToken + '.' + signature;\r",
									"const formattedToken = removeIllegalCharacters(token);\r",
									"\r",
									"pm.collectionVariables.set('JWT_TOKEN', formattedToken);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Api-Version",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{auth_service_host}}/auth/refresh",
							"host": [
								"{{auth_service_host}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "/signup",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Api-Version",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"hello\",\r\n    \"password\": \"test@1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{auth_service_host}}/auth/signup",
							"host": [
								"{{auth_service_host}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "transaction",
			"item": [
				{
					"name": "debit",
					"item": [
						{
							"name": "transaction (use 1-2)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Api-Version",
										"value": "1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"accountId\": 1,\r\n    \"pairAccountId\": 2,\r\n    \"type\": \"debit\",\r\n    \"amount\": 150\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{financial_service_host}}/transaction",
									"host": [
										"{{financial_service_host}}"
									],
									"path": [
										"transaction"
									]
								}
							},
							"response": []
						},
						{
							"name": "transaction  (use 3-4)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Api-Version",
										"value": "1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"accountId\": 3,\r\n    \"pairAccountId\": 4,\r\n    \"type\": \"debit\",\r\n    \"amount\": 200\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{financial_service_host}}/transaction",
									"host": [
										"{{financial_service_host}}"
									],
									"path": [
										"transaction"
									]
								}
							},
							"response": []
						},
						{
							"name": "transaction  (use 5-6)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Api-Version",
										"value": "1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"accountId\": 5,\r\n    \"pairAccountId\": 6,\r\n    \"type\": \"debit\",\r\n    \"amount\": 250\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{financial_service_host}}/transaction",
									"host": [
										"{{financial_service_host}}"
									],
									"path": [
										"transaction"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{JWT_TOKEN}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const accountIdFromBody = JSON.parse(pm.request.body.raw).accountId;",
							"const userId = pm.collectionVariables.get('user_id_' + accountIdFromBody);",
							"",
							"/***** DO NOT EDIT AFTER THIS *****/",
							"",
							"const currentTimeInSeconds = Math.floor(new Date().getTime() / 1000); ",
							"const issuedAtTimeSeconds = currentTimeInSeconds; // iat",
							"const expirationTimeSeconds = currentTimeInSeconds + 60; // exp",
							"const SECRET_KEY = pm.collectionVariables.get('JWT_SECRET');",
							"",
							"const header = {",
							"    alg: 'HS256',",
							"}",
							"",
							"const payload = {",
							"    userId,",
							"    loginId: new Date().getTime().toString(),",
							"    iat: issuedAtTimeSeconds,",
							"    exp: expirationTimeSeconds,",
							"};",
							"",
							"const removeIllegalCharacters = (input) => {",
							"    return input",
							"        .replace(/=/g, '')",
							"        .replace(/\\+/g, '-')",
							"        .replace(/\\//g, '_');",
							"};",
							"",
							"const base64object = (input) => {",
							"    const inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));",
							"    const base64 = CryptoJS.enc.Base64.stringify(inputWords);",
							"    const output = removeIllegalCharacters(base64);",
							"    return output;",
							"};",
							"",
							"const unsignedToken = base64object(header) + \".\" + base64object(payload);",
							"const signatureHash = CryptoJS.HmacSHA256(unsignedToken, SECRET_KEY);",
							"const signature = CryptoJS.enc.Base64.stringify(signatureHash);",
							"const token = unsignedToken + '.' + signature;",
							"const formattedToken = removeIllegalCharacters(token);",
							"",
							"pm.collectionVariables.set('JWT_TOKEN', formattedToken);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "balance",
			"item": [
				{
					"name": "balance (userId = 1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Api-Version",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"accountId\": 3342,\r\n    \"type\": \"debit\",\r\n    \"amount\": 1200\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{financial_service_host}}/balance?accountId=1",
							"host": [
								"{{financial_service_host}}"
							],
							"path": [
								"balance"
							],
							"query": [
								{
									"key": "accountId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "balance (userId = 2)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Api-Version",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"accountId\": 3342,\r\n    \"type\": \"debit\",\r\n    \"amount\": 1200\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{financial_service_host}}/balance?accountId=2",
							"host": [
								"{{financial_service_host}}"
							],
							"path": [
								"balance"
							],
							"query": [
								{
									"key": "accountId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "balance (userId = 3)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Api-Version",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"accountId\": 3,\r\n    \"type\": \"debit\",\r\n    \"amount\": 1200\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{financial_service_host}}/balance?accountId=3",
							"host": [
								"{{financial_service_host}}"
							],
							"path": [
								"balance"
							],
							"query": [
								{
									"key": "accountId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "balance (userId = 4)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Api-Version",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"accountId\": 3,\r\n    \"type\": \"debit\",\r\n    \"amount\": 1200\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{financial_service_host}}/balance?accountId=4",
							"host": [
								"{{financial_service_host}}"
							],
							"path": [
								"balance"
							],
							"query": [
								{
									"key": "accountId",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "balance (userId = 5)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Api-Version",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"accountId\": 3,\r\n    \"type\": \"debit\",\r\n    \"amount\": 1200\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{financial_service_host}}/balance?accountId=5",
							"host": [
								"{{financial_service_host}}"
							],
							"path": [
								"balance"
							],
							"query": [
								{
									"key": "accountId",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "balance (userId = 6)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Api-Version",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"accountId\": 3,\r\n    \"type\": \"debit\",\r\n    \"amount\": 1200\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{financial_service_host}}/balance?accountId=6",
							"host": [
								"{{financial_service_host}}"
							],
							"path": [
								"balance"
							],
							"query": [
								{
									"key": "accountId",
									"value": "6"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{JWT_TOKEN}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const accountIdFromURL = pm.request.url.query.get('accountId');",
							"const userId = pm.collectionVariables.get('user_id_' + accountIdFromURL);",
							"",
							"/***** DO NOT EDIT AFTER THIS *****/",
							"",
							"const currentTimeInSeconds = Math.floor(new Date().getTime() / 1000); ",
							"const issuedAtTimeSeconds = currentTimeInSeconds; // iat",
							"const expirationTimeSeconds = currentTimeInSeconds + 60; // exp",
							"const SECRET_KEY = pm.collectionVariables.get('JWT_SECRET');",
							"",
							"const header = {",
							"    alg: 'HS256',",
							"}",
							"",
							"const payload = {",
							"    userId,",
							"    role: 'user',",
							"    loginId: new Date().getTime().toString(),",
							"    iat: issuedAtTimeSeconds,",
							"    exp: expirationTimeSeconds,",
							"};",
							"",
							"const removeIllegalCharacters = (input) => {",
							"    return input",
							"        .replace(/=/g, '')",
							"        .replace(/\\+/g, '-')",
							"        .replace(/\\//g, '_');",
							"};",
							"",
							"const base64object = (input) => {",
							"    const inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));",
							"    const base64 = CryptoJS.enc.Base64.stringify(inputWords);",
							"    const output = removeIllegalCharacters(base64);",
							"    return output;",
							"};",
							"",
							"const unsignedToken = base64object(header) + \".\" + base64object(payload);",
							"const signatureHash = CryptoJS.HmacSHA256(unsignedToken, SECRET_KEY);",
							"const signature = CryptoJS.enc.Base64.stringify(signatureHash);",
							"const token = unsignedToken + '.' + signature;",
							"const formattedToken = removeIllegalCharacters(token);",
							"",
							"pm.collectionVariables.set('JWT_TOKEN', formattedToken);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "auth_service_host",
			"value": "http://localhost:3001",
			"type": "default"
		},
		{
			"key": "financial_service_host",
			"value": "http://localhost:3002",
			"type": "default"
		},
		{
			"key": "JWT_SECRET",
			"value": "09d9059c-23c1-4309-91c7-cda91abab092",
			"type": "string"
		},
		{
			"key": "JWT_TOKEN",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_id_1",
			"value": "10f88251-d181-4255-92ed-d0d874e3a166",
			"type": "string"
		},
		{
			"key": "user_id_2",
			"value": "6d162827-98a1-4d20-8aa0-0a9c3e8fc76f",
			"type": "string"
		},
		{
			"key": "user_id_3",
			"value": "bc760244-ca8a-42b1-9cf6-70ceedc2e3d1",
			"type": "string"
		},
		{
			"key": "JWT_REFRESH_SECRET",
			"value": "83814af2-927e-414a-abd1-83524f7cad65",
			"type": "string"
		},
		{
			"key": "user_id_4",
			"value": "bc760244-ca8a-42b1-9cf6-70ceedc2e221",
			"type": "string"
		},
		{
			"key": "user_id_5",
			"value": "3132a64a-de8b-49cc-b49f-b445ee984415",
			"type": "string"
		},
		{
			"key": "user_id_6",
			"value": "d074a9d4-a179-40bd-ab6a-38755e066312",
			"type": "string"
		},
		{
			"key": "user_service_host",
			"value": "http://localhost:3003",
			"type": "string"
		}
	]
}